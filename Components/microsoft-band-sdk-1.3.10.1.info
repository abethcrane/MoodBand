{"Name":"Microsoft Band SDK","Id":2725,"Alias":"microsoft-band-sdk","Description":"# Microsoft Band SDK\n\nThe Microsoft Band SDK gives developers access to the sensors available on the \nband, as well as the ability to create and send notifications to tiles. Enhance \nand extend the experience of your applications to your customers\u0027 wrists.\n\n## Amazing App Experiences\nExtend the experience of your application to your users\u0027 wrists via a new \ndimension of interaction. Create an app that can send UI content to the band, \nkeeping users engaged when they\u0027re in motion. Your app can also receive data \ndirectly from the band sensors, giving your users more reasons to interact \nwith it. Create a personalized, data-rich, custom experience and enhanced \nscenarios that will engage users in ways only possible with Microsoft Band.\n\n### Access Sensors\nUse a range of sensors including heart rate, UV, accelerometer, gyroscope, and \nskin temperature, as well as fitness data, to design cutting-edge user \nexperiences:\n\n - **Accelerometer**  \n   Provides X, Y, and Z acceleration in meters per second squared (m/s²) units.\n - **Gyroscope**  \n   Provides X, Y, and Z angular velocity in degrees per second (°/sec) units.\n - **Distance**  \n   Provides the total distance in centimeters, current speed in centimeters \n   per second (cm/s), current pace in milliseconds per meter (ms/m), and \n   the current pedometer mode (such as walking or running).\n - **Heart Rate**  \n   Provides the number of beats per minute, also indicates if the heart rate \n   sensor is fully locked onto the wearer’s heart rate.\n - **Pedometer**  \n   Provides the total number of steps the wearer has taken.\n - **Skin Temperature**  \n   Provides the current skin temperature of the wearer in degrees Celsius.\n - **UV**  \n   Provides the current ultra violet radiation exposure intensity.\n - **Device Contact**  \n   Provides a way to let the developer know if someone is currently wearing \n   the device.\n - **Calories**  \n   Provides the total number of calories the wearer has burned.\n - **Altimeter** _(Microsoft Band 2 only)_  \n   Provides current elevation data like total gain/loss, steps \n   ascended/descended, flights ascended/descended, and elevation rate. \n - **Ambient Light** _(Microsoft Band 2 only)_  \n   Provides the current light intensity (illuminance) in lux (Lumes/m²).\n - **Barometer** _(Microsoft Band 2 only)_  \n   Provides the current raw air pressure in hPa (hectopascals) and raw \n   temperature in degrees Celsius.\n - **Galvanic Skin Response (GSR)** _(Microsoft Band 2 only)_  \n   Provides the current skin resistance of the wearer in kohms. \n - **RR Interval** _(Microsoft Band 2 only)_  \n   Provides the interval in seconds between the last two continuous heart beats. \n\n### Create App Tiles\nKeep users engaged and extend your app experience to Microsoft Band. Create \ntiles for the band that send glance-able data and notifications from your app \nto your users.\n\n#### Tile Notifications\n\nEach app tile is visually represented on the Start Strip by an icon, and when a \nnew notification arrives, the icon is scaled down and a number badge appears on \nthe tile. App notifications come in two flavors:\n\n - **Dialogs**  \n   Dialog notifications are popups meant to quickly display information to the \n   user. Once the user dismisses the dialog, the information contained therein \n   does not persist on the Band.\n - **Messages**  \n   Message notifications are sent and stored in a specific tile, and a tile can \n   keep up to 8 messages at a time. Messages may display a dialog as well.\n   Both notifications types contain a title text and a body text.\n\n#### Custom Tile Pages\n\nCustom tiles have application defined layouts and custom content, which includes \nmultiple icons, buttons, text blocks, and barcodes. With custom tiles, developers\ncan define unique experiences for their applications. The developers control \nexactly how many pages to show inside of a tile as well as the content of \nindividual pages. \n\nThey can update the contents of a page that has been created using custom layout\nat any point, unlike messaging tiles where every new message results in the \ncreation of a new page inside the tile. In addition, a developer can choose to \nadd additional pages inside the tile. If the total number of pages goes past the \nmaximum pages allowed inside the tile, the right most page is dropped out when a \nnew page is added.\n\n#### Tile Events\n\nIt is also possible to register for tile events. This allows a developer to know\nwhen the user has entered and exited their tile. In addition, they can receive \nevents when a user taps on a button in one of their custom tiles.\n\n### Personalize Device\nMonetize your app by offering users ways to customize the band. Change the color \ntheme, or bring the Me Tile to life by changing the wallpaper.\n\n[1]:http://developer.microsoftband.com/\n[2]:https://cdn.rawgit.com/mattleibow/Microsoft-Band-SDK-Bindings/v1.3.6/Images/capabilities.png\n","Version":"1.3.10.1","Summary":"Extend the experience of your application to your users\u0027 wrists via a new dimension of interaction.","QuickStart":"# Getting Started with Microsoft Band SDK\n\nThe Microsoft Band SDK gives developers access to the sensors available on the \nband, as well as the ability to create and send notifications to tiles. Enhance \nand extend the experience of your applications to your customers\u0027 wrists.\n\n## Amazing App Experiences\nExtend the experience of your application to your users\u0027 wrists via a new \ndimension of interaction. Create an app that can send UI content to the band, \nkeeping users engaged when they\u0027re in motion. Your app can also receive data \ndirectly from the band sensors, giving your users more reasons to interact \nwith it. Create a personalized, data-rich, custom experience and enhanced \nscenarios that will engage users in ways only possible with Microsoft Band.\n\n### Access Sensors\nUse a range of sensors including heart rate, UV, accelerometer, gyroscope, and \nskin temperature, as well as fitness data, to design cutting-edge user \nexperiences:\n\n - **Accelerometer**  \n   Provides X, Y, and Z acceleration in meters per second squared (m/s²) units.\n - **Gyroscope**  \n   Provides X, Y, and Z angular velocity in degrees per second (°/sec) units.\n - **Distance**  \n   Provides the total distance in centimeters, current speed in centimeters \n   per second (cm/s), current pace in milliseconds per meter (ms/m), and \n   the current pedometer mode (such as walking or running).\n - **Heart Rate**  \n   Provides the number of beats per minute, also indicates if the heart rate \n   sensor is fully locked onto the wearer’s heart rate.\n - **Pedometer**  \n   Provides the total number of steps the wearer has taken.\n - **Skin Temperature**  \n   Provides the current skin temperature of the wearer in degrees Celsius.\n - **UV**  \n   Provides the current ultra violet radiation exposure intensity.\n - **Device Contact**  \n   Provides a way to let the developer know if someone is currently wearing \n   the device.\n - **Calories**  \n   Provides the total number of calories the wearer has burned.\n - **Altimeter** _(Microsoft Band 2 only)_  \n   Provides current elevation data like total gain/loss, steps \n   ascended/descended, flights ascended/descended, and elevation rate. \n - **Ambient Light** _(Microsoft Band 2 only)_  \n   Provides the current light intensity (illuminance) in lux (Lumes/m²).\n - **Barometer** _(Microsoft Band 2 only)_  \n   Provides the current raw air pressure in hPa (hectopascals) and raw \n   temperature in degrees Celsius.\n - **Galvanic Skin Response (GSR)** _(Microsoft Band 2 only)_  \n   Provides the current skin resistance of the wearer in kohms. \n - **RR Interval** _(Microsoft Band 2 only)_  \n   Provides the interval in seconds between the last two continuous heart beats. \n\n### Create App Tiles\nKeep users engaged and extend your app experience to Microsoft Band. Create \ntiles for the band that send glance-able data and notifications from your app \nto your users.\n\n#### Tile Notifications\n\nEach app tile is visually represented on the Start Strip by an icon, and when a \nnew notification arrives, the icon is scaled down and a number badge appears on \nthe tile. App notifications come in two flavors:\n\n - **Dialogs**  \n   Dialog notifications are popups meant to quickly display information to the \n   user. Once the user dismisses the dialog, the information contained therein \n   does not persist on the Band.\n - **Messages**  \n   Message notifications are sent and stored in a specific tile, and a tile can \n   keep up to 8 messages at a time. Messages may display a dialog as well.\n   Both notifications types contain a title text and a body text.\n\n#### Custom Tile Pages\n\nCustom tiles have application defined layouts and custom content, which includes \nmultiple icons, buttons, text blocks, and barcodes. With custom tiles, developers\ncan define unique experiences for their applications. The developers control \nexactly how many pages to show inside of a tile as well as the content of \nindividual pages. \n\nThey can update the contents of a page that has been created using custom layout\nat any point, unlike messaging tiles where every new message results in the \ncreation of a new page inside the tile. In addition, a developer can choose to \nadd additional pages inside the tile. If the total number of pages goes past the \nmaximum pages allowed inside the tile, the right most page is dropped out when a \nnew page is added.\n\n#### Tile Events\n\nIt is also possible to register for tile events. This allows a developer to know\nwhen the user has entered and exited their tile. In addition, they can receive \nevents when a user taps on a button in one of their custom tiles.\n\n### Personalize Device\nMonetize your app by offering users ways to customize the band. Change the color \ntheme, or bring the Me Tile to life by changing the wallpaper.\n\n## SDK API Usage\n\nMore advanced documentation can be found on the \n[Microsoft Band Developers Page][1].\n\n### Requirements\n\nAll operations with the Band API are performed using the types and members of \nthe `Microsoft.Band.Portable` namespace. This makes it easier to share and reuse \ncode across platforms. But, the original `Microsoft.Band` namespace can still be \nused on the specific platforms. \n\n#### Android 4.2+\n1. Permission to access Bluetooth:  \n   `[assembly: UsesPermission(Android.Manifest.Permission.Bluetooth)]`\n2. Permission to access the Band service:  \n   `[assembly: UsesPermission(Microsoft.Band.BandClientManager.BindBandService)]`\n\n#### Windows Phone 8.1+ \u0026 Windows 8.1+ (Windows Runtime)\n1. You will also need to add the Proximity capability:  \n![Capabilities][2]\n2. Permission to access Bluetooth:  \n\n```\n\u003cDeviceCapability Name=\"bluetooth.rfcomm\"\u003e\n  \u003cDevice Id=\"any\"\u003e\n    \u003c!-- Used by the Microsoft Band SDK --\u003e\n    \u003cFunction Type=\"serviceId:A502CA9A-2BA5-413C-A4E0-13804E47B38F\" /\u003e\n    \u003c!-- Used by the Microsoft Band SDK --\u003e\n    \u003cFunction Type=\"serviceId:C742E1A2-6320-5ABC-9643-D206C677E580\" /\u003e\n  \u003c/Device\u003e\n\u003c/m2:DeviceCapability\u003e\n```\n\n#### iOS 7+\n\n1. Automatically adds the CoreBluetooth framework.\n2. In order for the app to communicate with the Band in the background, \n\"Use Bluetooth LE Accessories\" must be enabled in Background Modes.\n\n### Connecting to a Band\n\nConnecting to a Band device is very easy and only requires two steps:\n\n1. Get a list of the paired Band devices\n2. Connect to a specific Band device\n\n```\nvar bandClientManager = BandClientManager.Instance;\n// query the service for paired devices\nvar pairedBands = await bandClientManager.GetPairedBandsAsync();\n// connect to the first device\nvar bandInfo = pairedBands.FirstOrDefault();\nvar bandClient = await bandClientManager.ConnectAsync(bandInfo);\n```\n\n### Connecting to a Sensor\n\nConnecting to a sensor on the Band requires the use of the Sensor Manager.\n\n```\nvar sensorManager = bandClient.SensorManager;\n// get the accelerometer sensor\nvar accelerometer = sensorManager.Accelerometer;\n// add a handler\naccelerometer.ReadingChanged += (o, args) =\u003e {\n    var yReading = args.SensorReading.AccelerationY;\n};\n// start reading, with the interval\nawait accelerometer.StartReadingsAsync(SampleRate.Ms16);\n// stop reading\nawait accelerometer.StopReadingsAsync();\n```\n\nSome sensors require user consent before use. One of these sensors, and \ncurrently the only one, is the heart rate sensor.\n\n```\nvar sensorManager = bandClient.SensorManager;\n// get the heart rate sensor\nvar heartRate = sensorManager.HeartRate;\n// add a handler\nheartRate.ReadingChanged += (o, args) =\u003e {\n    var quality= args.SensorReading.Quality;\n};\nif (heartRate.UserConsented == UserConsent.Unspecified) {\n    bool granted = await heartRate.RequestUserConsent();\n}\nif (heartRate.UserConsented == UserConsent.Granted) {\n    // start reading, with the interval\n    await heartRate.StartReadingsAsync(SampleRate.Ms16);\n} else {\n    // user declined\n}\n// stop reading\nawait heartRate.StopReadingsAsync();\n```\n\n### Adding Tiles\n\nAnother feature of the Band is the ability to provide the user with custom, \ninteractive tiles.\n\n```\nvar tileManager = bandClient.TileManager;\n// get the current set of tiles\nvar tiles = await tileManager.GetTilesAsync();\n// get the number of tiles we can add\nvar capacity = await tileManager.GetRemainingTileCapacityAsync();\n// create a new tile\nvar tile = new BandTile(tileId) {\n    Icon = await BandImage.FromStreamAsync(tileImageStream),\n    Name = \"Tile Name\",\n    SmallIcon = await BandImage.FromStreamAsync(tileBadgeImageStream)\n};\n// add the tile\nawait tileManager.AddTileAsync(tile);\n// remove the tile\nawait tileManager.RemoveTileAsync(tile);\n```\n\n### Adding Pages to Tiles\n\nTiles are made up of the actual tile as well as pages. Each page can consist of \nseveral page elements with which to provide the user information. Buttons can be \nadded to allow the user to communicate back to the app on the device.\n\n```\n// define page/element IDs\nGuid tileId = Guid.NewGuid();\nGuid pageId = Guid.NewGuid();\nint pageIndex = 0;\nshort titleId = 1;\nshort buttonId = 2;\nshort imageId = 3;\n// create the new tile\nvar tile = new BandTile(tileId) { ... };\n// define the page layout\nvar pageLayout = new PageLayout {\n    Root = new ScrollFlowPanel {\n        Rectangle = new Rectangle(0, 0, 245, 105),\n        Orientation = Orientation.Vertical,\n        Elements = {\n            new TextBlock {\n                ElementId = titleId,\n                Rectangle = new Rectangle(0, 0, 229, 30),\n                TextColorSource = ElementColorSource.BandBase,\n                HorizontalAlignment = HorizontalAlignment.Left,\n                VerticalAlignment = VerticalAlignment.Bottom\n            },\n            new TextButton {\n                ElementId = buttonId,\n                Rectangle = new Rectangle(0, 0, 229, 43),\n                PressedColor = new BandColor(0, 127, 0)\n            },\n            new Image {\n                ElementId = imageId,\n                Rectangle = new Rectangle(0, 0, 229, 46),\n                Color = new BandColor(127, 127, 0),\n                VerticalAlignment = VerticalAlignment.Center,\n                HorizontalAlignment = HorizontalAlignment.Center\n            }\n        }\n    }\n};\n// add the page layout to the tile\ntile.PageLayouts.Add(pageLayout);\n// add additional images\ntile.PageImages.Add(await BandImage.FromStreamAsync(additionalImageStream));\n// add the tile to the Band\nawait tileManager.AddTileAsync(tile);\n// declare the data for the page\nvar pageData = new PageData {\n    PageId = pageId,\n    PageLayoutIndex = pageIndex,\n    Data = {\n        new TextBlockData {\n            ElementId = titleId,\n            Text = \"Buttons\"\n        },\n        new TextButtonData {\n            ElementId = buttonId,\n            Text = \"Press Me!\"\n        },\n        new ImageData {\n            ElementId = imageId,\n            ImageIndex = 0\n        }\n    }\n};\n// apply the data to the tile\nawait tileManager.SetTilePageDataAsync(tileId, pageData);\n```\n\n### Subscribing to Band Page Events\n\nEvents can be received from the Band when a tile is opened or close, as well as \nwhen the user presses a button on a page. \n\n```\nvar tileManager = bandClient.TileManager;\n// attach a handler to the button pressed event\ntileManager.TileButtonPressed += (sender, e) =\u003e {\n    var buttonId = e.ElementId;\n    var pageId = e.PageId;\n    var tileId = e.TileId;\n};\n// attach a handler to the tile events\ntileManager.TileOpened += (sender, e) =\u003e {\n    var tileId = e.TileId;\n};\ntileManager.TileClosed += (sender, e) =\u003e {\n    var tileId = e.TileId;\n};\n// start listening to events from the Band\nawait tileManager.StartEventListenersAsync();\n// stop listening\nawait BandClient.TileManager.StopEventListenersAsync();\n```\n\n### Send a Message\n\nAlong with pages, a tile can be used to show notifications or dialogs.\n\n```\nvar notifictionManager = bandClient.NotificationManager;\n// send a notification to the Band with a dialog as well as a page\nawait notifictionManager.SendMessageAsync(\n    tileId, \n    \"Message Title\", \n    \"This is the message body...\", \n    DateTime.Now, \n    true);\n```\n\n[1]:http://developer.microsoftband.com/\n[2]:https://cdn.rawgit.com/mattleibow/Microsoft-Band-SDK-Bindings/v1.3.6/Images/capabilities.png\n","Hash":"08d1c1577efd7612f76c4b06766a9d26","TargetPlatforms":["ios","android"],"TrialHash":null}